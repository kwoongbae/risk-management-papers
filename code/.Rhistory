g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 10000000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- erdos.renyi.game(50, p=0.16, directed=FALSE)  # Erdős–Rényi Network
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
c(min(security_levels), max(security_levels))
# Libraries
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
# SIR Simulation Function for a Single Node
simulate_sir_loss <- function(security_level) {
infection_count <- 0
recovery_rate <- security_level  # Higher security level increases recovery rate
for (i in 1:num_simulations) {
infected <- FALSE  # Start as not infected
if (runif(1) < tau) {  # Infection chance based on tau
infected <- TRUE
recovery_time <- rexp(1, rate=recovery_rate)  # Random recovery time
infection_count <- infection_count + recovery_time
}
}
average_loss <- infection_count / num_simulations  # Average loss over simulations
return(average_loss)
}
# Total Expense Function with SIR Loss
total_expense <- function(security_level) {
return(cost_function(security_level) + simulate_sir_loss(security_level))
}
# Security Optimization for Each Node
optimize_security <- function() {
sapply(V(g), function(node) {
optimize(function(x) total_expense(x), lower=0, upper=2)$minimum
})
}
security_levels <- optimize_security()
# Step 3: Iterative Security Optimization (Game Simulation)
max_iterations <- 50
for (i in 1:max_iterations) {
new_security_levels <- optimize_security()
if (all(abs(new_security_levels - security_levels) < 0.01)) break
security_levels <- new_security_levels
}
c(min(security_levels), max(security_levels))
# Total Network Expense Calculation
total_network_expense <- sum(sapply(security_levels, total_expense))
total_network_expense
# Centrality and Security Levels Analysis
degree_centrality <- degree(g)
plot(degree_centrality, security_levels, main="Centrality vs. Security Level")
# Visualization of Final Security Levels
plot(g, vertex.size=security_levels * 10, vertex.label=NA, main="Network Security Levels")
# Libraries
library(igraph)
# Step 1: Network Setup
set.seed(42)
g <- barabasi.game(50, m=4, directed=FALSE)  # Barabási–Albert Network (50 nodes, 4 edges per new node)
# Parameters
tau <- 0.1                # Infection rate
gamma_initial <- 0.1      # Initial recovery rate
k <- 1/3                  # Security investment cost constant
num_simulations <- 1000  # Number of trajectories for SIR simulation
# Cost and Loss Functions
cost_function <- function(security_level) {
return(exp(k * security_level) - 1)
}
library(data.table)  # 데이터 처리
library(stats)       # 최적화 함수
# ==============================================================================
library(deSolve)
library(VGAM)
set.seed(123)
beta <- 2.556e-7   # 감염률
gamma <- 1         # 회복률
N <- 4064279       # 전체 인구 수
init <- c(S = N - 30100, I = 30100, R = 0)
SIR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <- beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
log(1-300000/4064279)/(-1*300000)
times <- seq(0, 10, by = 0.0001)
parameters <- c(beta = beta, gamma = gamma)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
dt <- diff(times)[1]  # 시간 간격
cumulative_infected <- sum(sir_df$I * dt)  # I(t) * dt의 총합
print(cumulative_infected)
source("C:/Users/Keywoong/OneDrive - postech.ac.kr/05. 개인자료/01. 깃허브 레포지토리/risk-management-papers/code/Hillairet and Lopez (2021).r", echo=TRUE)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
# ==============================================================================
library(deSolve)
library(VGAM)
# ==============================================================================
install.packages("deSolve")
# ==============================================================================
#install.packages("deSolve")
library(deSolve)
library(VGAM)
set.seed(123)
beta <- 2.556e-7   # 감염률
gamma <- 1         # 회복률
N <- 4064279       # 전체 인구 수
init <- c(S = N - 30100, I = 30100, R = 0)
SIR <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
dS <- -beta * S * I
dI <- beta * S * I - gamma * I
dR <- gamma * I
return(list(c(dS, dI, dR)))
})
}
log(1-300000/4064279)/(-1*300000)
times <- seq(0, 10, by = 0.0001)
parameters <- c(beta = beta, gamma = gamma)
out <- ode(y = init, times = times, func = SIR, parms = parameters)
sir_df <- as.data.frame(out)
dt <- diff(times)[1]  # 시간 간격
cumulative_infected <- sum(sir_df$I * dt)  # I(t) * dt의 총합
print(cumulative_infected)
plot(sir_df$time, sir_df$S, type = "l", col = "blue", lwd = 2, ylim = c(0, N),
xlab = "Time (Days)", ylab = "Number of People",
main = "SIR Model: Epidemic Over Time")
lines(sir_df$time, sir_df$I, col = "red", lwd = 2)
lines(sir_df$time, sir_df$R, col = "green", lwd = 2)
# 범례 추가
legend("right", legend = c("Susceptible", "Infected", "Recovered"),
col = c("blue", "red", "green"), lwd = 2)
plot(sir_df$time, sir_df$S, type = "l", col = "blue", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Susceptible Individuals",
main = "Number of Susceptible Individuals Over Time")
# I 그래프
plot(sir_df$time, sir_df$I, type = "l", col = "red", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Infected Individuals",
main = "Number of Infected Individuals Over Time")
# R 그래프
plot(sir_df$time, sir_df$R, type = "l", col = "green", lwd = 2,
xlab = "Time (Days)", ylab = "Number of Recovered Individuals",
main = "Number of Recovered Individuals Over Time")
num_simulations <- 10000
cumulative_value_results_exp <- numeric(num_simulations)
cumulative_value_results_pareto <- numeric(num_simulations)
cumulative_value_results_weibull <- numeric(num_simulations)
tau_j <- 7
for (sim in 1:num_simulations) {
cumulative_value_exp <- 0
cumulative_value_pareto <- 0
cumulative_value_weibull <- 0
for (t in seq_along(sir_df$time)) {
lambda_C_exp <- ifelse(t>=tau_j,rexp(1,rate = 1),0)
lambda_C_pareto <- ifelse(t>=tau_j, rpareto(1, scale=1/2, shape=2),0)
lambda_C_weibull <- ifelse(t>=tau_j, rweibull(1, shape = 1),0)
survival_C_exp <- exp(-lambda_C_exp*t)
survival_C_pareto <- exp(-lambda_C_pareto*t)
survival_C_weibull <- exp(-lambda_C_weibull*t)
lambda_T <- beta*i_values[t]
density_T <- lambda_T*exp(-lambda_T*t)
value_exp <- survival_C_exp*density_T
value_pareto <- survival_C_pareto*density_T
value_weibull <- survival_C_weibull*density_T
cumulative_value_exp <- cumulative_value_exp + value_exp*10000
cumulative_value_pareto <- cumulative_value_pareto + value_pareto*10000
cumulative_value_weibull <- cumulative_value_weibull + value_weibull*10000
}
cumulative_value_results_exp[sim] <- cumulative_value_exp
cumulative_value_results_pareto[sim] <- cumulative_value_pareto
cumulative_value_results_weibull[sim] <- cumulative_value_weibull
}
sd(cumulative_value_results_exp)
summary(cumulative_value_results_pareto)
sd(cumulative_value_results_pareto)
summary(cumulative_value_results_weibull)
sd(cumulative_value_results_weibull)
set.seed(123)
population <- 261
initial_infected <- 7
initial_susceptible <- population - initial_infected
num_simulations <- 20000
# Transition rate parameters
alpha <- 1.0
# function for generating state transition times
simulate_epidemic <- function(population, initial_infected, alpha){
susceptible <- initial_susceptible
infected <- initial_infected
removed <- 0
time <- 0
while(infected > 0){
total_rate <- alpha*infected * susceptible / population
time_to_next_event <- rexp(1, rate = total_rate)
time <- time + time_to_next_event
if(runif(1) < susceptible / (susceptible+infected)){
susceptible <- susceptible -1
infected <- infected +1
}else{
infected <- infected -1
removed <- removed +1
}
}
return(time)
}
simulation_results <- replicate(num_simulations, simulate_epidemic(population,
initial_infected,
alpha))
mean_duration <- mean(simulation_results)
std_dev_duration <- sd(simulation_results)
hist(simulation_results, breaks = 50, probability = TRUE, col = "lightblue",
main = "Epidemic Duration Distribution",
xlab = "Duration (years)", ylab = "Density")
# Add a density curve
lines(density(simulation_results), col = "blue", lwd = 2)
population <- 261
timeline <- c(0.0000, 0.0397, 0.0822, 0.1247, 0.1671, 0.2096, 0.2521, 0.3370)
susceptible <- c(254, 235, 201, 153, 121, 108, 97, 83)
infected <- c(7, 14, 22, 29, 21, 8, 8, 0)
s_ratio <- susceptible / population
i_ratio <- infected / population
plot(timeline, s_ratio, type = "o", col = "blue", ylim = c(0, 1),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "Time Series of S(t) and I(t) Ratios")
lines(timeline, i_ratio, type = "o", col = "red")
legend("topright", legend = c("S(t) Ratio (Susceptible)", "I(t) Ratio (Infected)"),
col = c("blue", "red"), lty = 1, pch = 1)
plot(timeline, s_ratio, type = "p", col = "blue", ylim = c(0, 1),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "S(t) Ratio (Susceptible)")
lines(smooth.spline(timeline, s_ratio), col = "black", lwd = 2)
# Plot for I(t)
plot(timeline, i_ratio, type = "p", col = "red", ylim = c(0, 1),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "I(t) Ratio (Infected)")
lines(smooth.spline(timeline, i_ratio), col = "black", lwd = 2)
# Plot for I(t)
plot(timeline, i_ratio, type = "p", col = "red", ylim = c(0, 1),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "I(t) Ratio (Infected)",
ylim = c(0,0.15))
# Plot for I(t)
plot(timeline, i_ratio, type = "p", col = "red", ylim = c(0, 0.15),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "I(t) Ratio (Infected)")
lines(smooth.spline(timeline, i_ratio), col = "black", lwd = 2)
# Plot for I(t)
plot(timeline, i_ratio, type = "p", col = "red", ylim = c(0, 0.15),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "I(t) Ratio (Infected)")
lines(lowess(timeline, i_ratio, f = 0.5), col = "black", lwd = 2)
plot(timeline, s_ratio, type = "p", col = "blue", ylim = c(0, 1),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "S(t) Ratio (Susceptible)")
lines(smooth.spline(timeline, s_ratio), col = "black", lwd = 2)
lines(smooth.spline(timeline, i_ratio), col = "black", lwd = 2)
# Plot for I(t)
plot(timeline, i_ratio, type = "p", col = "red", ylim = c(0, 0.15),
xlab = "Timeline (0 to 1)", ylab = "Proportion of Population",
main = "I(t) Ratio (Infected)")
lines(smooth.spline(timeline, i_ratio), col = "black", lwd = 2)
254/261
0.3257/(254/261)
0.6743/(254/261)
0.3257+0.6743
library("rlang")
library("dplyr")
library("ggplot2")
library("MASS") # import plotdist
library("fitdistrplus") #fitdist
library("lubridate") # transform to ymd
library("POT") # import fitgpd
library("extraDistr")
library("actuar") # fitdist on log-logistic
library("sn") # import snormFit
advisen <- read.csv("../../dataset/merged_advisen.csv")
colnames(advisen)
length(advisen$ACD) # 156,020
usa_advisen <- advisen[advisen$COUNTRY_CODE=="USA",]
length(usa_advisen$ACD) # 129,317
col <- c(16, 48, 22, 41, 42, 38, 39, 110, 158, 159, 133, 163, 10, 123)
colnames(advisen)[col]
extracted_advisen <- usa_advisen[, col]
colnames(extracted_advisen)
final_advisen <- extracted_advisen %>%
filter(!is.na(TOTAL_AMOUNT) & !is.na(ACCIDENT_DATE) & !is.na(REVENUES) & !is.na(EMPLOYEES)
& !is.na(CASE_TYPE) & !is.na(PROXIMATE_CAUSE) & !is.na(ACTOR_NAME)
& !is.na(COMPANY_TYPE) & !is.na(NAIC_SECTOR_DESC))
length(final_advisen$AFFECTED_COUNT)
advisen$PROXIMATE_CAUSE
colnames(advisen)
View(extracted_advisen)
usa_advisen[, 'CASESTATUS']
usa_advisen[, c('CASESTATUS', 'MSCAD_ID')]
unique(usa_advisen$ACTOR_NAME)
unique(usa_advisen$ACTOR_TYPE)
unique(usa_advisen$company_type)
unique(usa_advisen$COMPANY_TYPE)
col <- c("CASE_TYPE", "AFFECTED_COUNT", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUE", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE")
extracted_advisen <- usa_advisen[, col]
colnames(usa_advisen)
intersect(col, names(usa_advisen))
col <- c("CASE_TYPE", "AFFECTED_COUNT", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE")
intersect(col, names(usa_advisen))
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$COUNTRY_CODE)
length(clean_data)
length(clean_data$ACCIDENT_DATE)
View(clean_data)
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "COUNTRY")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_CODE")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_x")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
col <- c("CASE_TYPE", "PROXIMATE_CAUSE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_x")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
col <- c("CASE_TYPE", "SECONDARY_CAUSE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_x")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
col <- c("CASE_TYPE", "AFFECTED_COUNT", "SECONDARY_CAUSE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_x")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
colnames(advisen)
length(advisen$ACD) # 156,020
usa_advisen <- advisen[advisen$COUNTRY_CODE=="USA",]
usa_advisen <- advisen[advisen$CASESTATUS=="Estimate",]
length(usa_advisen$ACD) # 129,317
usa_advisen <- advisen[advisen$COUNTRY_CODE=="USA",]
length(usa_advisen$ACD) # 129,317
usa_advisen <- advisen[advisen$CASESTATUS=="Estimate",]
length(usa_advisen$ACD) # 129,317
colnames(advisen)
col <- c("CASE_TYPE", "ACCIDENT_DATE", "ACTOR_TYPE", "TOTAL_AMOUNT", "REVENUES", "COMPANY_TYPE", "EMPLOYEES", "NAIC_SECTOR", "COUNTRY_CODE", "ZIP_x")
extracted_advisen <- usa_advisen[, col]
clean_data <- extracted_advisen[complete.cases(extracted_advisen), ]
length(clean_data$ACCIDENT_DATE)
# 예시 데이터 생성
data <- data.frame(
A = c(1, 2, NA, 4),
B = c(NA, 2, 3, 4),
C = c(1, 2, 3, NA)
)
head(data)
# 모든 열에서 결측치가 없는 행만 추출
clean_data <- data[complete.cases(data), ]
# 결과 출력
print(clean_data)
final_advisen <- extracted_advisen %>%
filter(!is.na(CASE_TYPE) & !is.na(ACCIDENT_DATE) & !is.na(ACTOR_TYPE) & !is.na(TOTAL_AMOUNT)
& !is.na(REVENUES) & !is.na(COMPANY_TYPE) & !is.na(EMPLOYEES)
& !is.na(NAIC_SECTOR) & !is.na(COUNTRY_CODE))
length(final_advisen$ACCIDENT_DATE)
length(final_advisen$AFFECTED_COUNT)
